name: run tests, generate a tag, upload to docker hub and deploy on render
on:
  pull_request: 
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: flask_base_root_pass
          MYSQL_DATABASE: flask_base_db
          MYSQL_USER: flask_base_user
          MYSQL_PASSWORD: flask_base_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      run: |
        export MYSQL_HOSTNAME=127.0.0.1
        export MYSQL_PORT=3306
        export MYSQL_DATABASE=flask_base_db
        export MYSQL_USER=flask_base_user
        export MYSQL_PASSWORD=flask_base_pass
        pytest app/tests/*.py

  tag:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Install Node.js and npm
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@17
          npm install --save-dev @semantic-release/changelog
          npm install --save-dev @semantic-release/exec
          npm install --save-dev @semantic-release/git
          pip install wheel
          pip install twine

      - name: Configure Git
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Semantic Release
        run: |
          npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}

  upload-to-docker-hub:
      runs-on: ubuntu-latest
      needs: tag

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_PASSWORD }}

        - name: Get variables
          id: get_variables
          run: |
            export VERSION="1.0.0"

            echo "javifdez7/programaze:${VERSION}"

        - name: Build and push Docker image
          run: docker build -t javifdez7/programaze:1.0.0 -f Dockerfile.prod .
          env:
            DOCKER_CLI_EXPERIMENTAL: enabled

        - name: Push Docker image to Docker Hub
          run: docker push javifdez7/programaze:1.0.0

  deploy:
    runs-on: ubuntu-latest
    needs: tag

    steps:
      - uses: actions/checkout@v3
      - name: Deploy
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$deploy_url"